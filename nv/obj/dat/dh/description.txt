Detached Header Translator Package
==================================

A detached header is a text file used to store ancillary information for a 
data set in a standard, machine-independent format.  Detached headers can be 
useful (1) when there is no other standard format available for storing the 
ancillary data, as would be the case for a map projection generated by OMINAS; 
or (2) for isolating one's updates from all external sources.  In the latter 
case, all of the ancillary information, regardless of its original source, 
would be stored in a detached header, along with all updates to that data.  
Different analyses on the same data set can be pursued using two different 
detached headers, for example.  Also, the detached header keeps track of the
update history.

This package contains utilities for creating and maintaining detached headers, 
as well as input and output translators for reading and writing of detached 
headers using OMINAS.

  Detached header layout
  ----------------------
  A detached header consists of two or more sections, separated by a line
  containing the section name enclosed in angle brackets, i.e., '<updates>'. 
  The first section, which starts at the first line of the detached header 
  and is not preceded by a section label, contains global information such 
  as the current history number of the file.  The second section, labeled
  '<updates>', contains update information.  Any number of later sections 
  may be added by the user.



  Detached header syntax
  ----------------------
  The syntax for each line of the detached header is as follows:

		keyword(i)[o]{h} = value / comment

  'keyword' and 'value' are  strings of any length consisting of any
  characters except for "*", "(", ")", "[", "]", "{", "}", "<", ">", and "/".
  If 'value' represents a string value, then it must be enclosed in single
  quotes.  'comment' is a string of any length consisting of any characters.

  'i' is the element index and denotes elements of an array.

  'o' is the object index and denotes different objects described by the same
  keyword parameters.

  'h' is the history index and denotes different updates of a keyword parameter.

  The element, object, and history indices default to 0 if not present.

  Examples:
   The following examples illustrate the the above syntax:

	cam_name = 'VGR1_ISS_NA'		/ i=0, o=0, h=0
	cam_name(1) = 'VGR1_ISS_NA'		/ i=1, o=0, h=0
	cam_name[2] = 'VGR1_ISS_NA'		/ i=0, o=2, h=0
	cam_name(1){3} = 'VGR1_ISS_NA'		/ i=1, o=0, h=3



 Reserved Keywords
 -----------------
  The following keywords are reserved:

	history		Value of greatest history index.
	utime		Julian date of most recent update for a particular
			history index. 
	updates		Separates global section from the update section.



 Detached Header Utility Routines
 --------------------------------
  Detached headers can be manipulated using the following IDL routines:

    dh_create		Creates a minimal detached header.

    dh_get_value	Gets the value of a specified keyword.

    dh_put_value	Sets the value of a specified keyword.

    dh_rm_value		Deletes a specified keyword/value pair.

    dh_read		Reads a detached header file.

    dh_write		Writes a detached header file.

    dh_fname		Constructs a detached header filename from the name of
			a data file.  

    dh_get		Extracts the detached header from an NV data descriptor.

    dh_set		Replaces the detached header in an NV data descriptor.

   
  Detached header translators
  ---------------------------
  Detached headers are read and written in OMINAS using the translators
  dh_std_input and dh_std_output.  These translators read or write camera,
  planet, ring, star, and map descriptor data to or from a detached header.  
  They allow for an inline format conversion so that the representation of the
  data in the detached header is not necessarily the same as OMINAS' internal
  representation.  This conversion is tracked using keywords of the form
  '[prefix]_format', where [prefix] is one of 'cam', 'plt', 'rng', 'str', or
  'map', depending on the descriptor in question.  Following are the keywords
  used by the detached header translators and their meanings:

  Camera keywords
	cam_name	String giving the name of the instrument.  
	cam_orient	9-element array giving the camera orientation matrix. 
	cam_pos		3-element array giving the camera position vector.
	cam_vel		3*ndv-element array giving the camera velocity vector
			and some number (ndv) of its time derivatives.
	cam_avel	3*ndv-element array giving the camera angular velocity
			vector and some number (ndv) of its time derivatives.
	cam_time	Scalar value giving the time of the center of the camera
			exposure.
	cam_exposure	Scalar giving the camera exposure duration.
	cam_scale	2-element array giving the camera scale in the x and y
			directions respectively.
	cam_oaxis	2-element array giving the image coordinates of the
			camera optic axis in the x and y directions
			respectively.
	cam_fn_focal_to_image	String giving the name of an IDL function that
				maps focal-plane coordinates to image
				coordinates.
	cam_fn_image_to_focal	String giving the name of an IDL function that
				maps image coordinates to focal-plane
				coordinates.
	cam_fn_data	Array of arbitrary length containing data for the 
			above IDL functions.

  Planet keywords
	plt_name	String giving the name of the planet.  
	plt_orient	9-element array giving the planet orientation matrix. 
	plt_pos		3-element array giving the planet position vector.
	plt_vel		3*ndv-element array giving the planet velocity vector
			and some number (ndv) of its time derivatives.
	plt_avel	3*ndv-element array giving the planet angular velocity
			vector and some number (ndv) of its time derivatives.
	plt_time	Scalar giving the time (in camera frame) at which these
			quantities apply.
	plt_radii	3-element array giving the planet ellipsoid model radii.
	plt_lora	Scalar giving the east longitude of first ellipsoid
			radius.
	plt_lref	String describing the longitude reference system.

  Ring keywords
	rng_name	String giving the name of the ring.  
	rng_primary	String giving the name of the ring's primary planet.  
	rng_orient	9-element array giving the planet orientation matrix. 
	rng_pos		3-element array giving the planet position vector.
	rng_vel		3*ndv-element array giving the planet velocity vector
			and some number (ndv) of its time derivatives.
	rng_avel	3*ndv-element array giving the planet angular velocity
			vector and some number (ndv) of its time derivatives.
	rng_time	Scalar giving the time (in camera frame) at which these
			quantities apply.
	rng_sma		2*ndv-element array giving the ring's inner and outer
			semimajor axes and some number (ndv) of time
			derivatives.
	rng_ecc		2*ndv-element array giving the ring's inner and outer
			eccentricities and some number (ndv) of time
			derivatives.
	rng_dlp		2*ndv-element array giving the ring's inner and outer
			pericenter longitudes and some number (ndv) of time
			derivatives.

  Star keywords
	str_name	String giving the name of the star.  
	str_orient	9-element array giving the star orientation matrix. 
	str_pos		3-element array giving the star position vector.
	str_vel		3*ndv-element array giving the star velocity vector
			and some number (ndv) of its time derivatives.
	str_avel	3*ndv-element array giving the star angular velocity
			vector and some number (ndv) of its time derivatives.
	str_time	Scalar giving the time (in camera frame) at which these
			quantities apply.
	str_radii	3-element array giving the star ellipsoid model radii.
	str_lora	Scalar giving the east longitude of first ellipsoid
			radius.
	str_lref	String describing the longitude reference system.
	str_lum		Scalar giving stellar luminosity.
	str_sp		String describing the star's spectral class.

  Map keywords
	map_name	String giving the name of the map.  
	map_type	String giving the type of map projection.  
	map_scale	Scalar giving the map scale.
	map_origin	2-element array giving the image coordinates of the
			lat/lon origin.
	map_size	2-element array giving the size of the map in the x and
			y directions respectively.
	map_lat_limits	2-element array giving the upper and lower latitude
			bounds of the map respectively.
	map_lon_limits	2-element array giving the upper and lower longitude
			bounds of the map respectively.
	map_fn_map_to_image	String giving the name of an IDL function that
				transforms map coordinates to image coordinates.
	map_fn_image_to_map	String giving the name of an IDL function that
				transforms image coordinates to map coordinates.
	map_fn_data	Array of arbitrary length containing data for the 
			above IDL functions.



