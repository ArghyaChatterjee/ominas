SPICE Translator Package
========================

 The purpose of the OMINAS SPICE interface is to allow SPICE kernels to be
 directly read into and written from OMINAS via input and output translators. 
 Because SPICE kernels are mission-dependent (the exact layout of the C-matrix
 depends on the camera in question, for example), unique input and output
 translators must be written for each mission supported.  Translators and
 supporting routines for each mission reside in subdirectories whose names are
 abbreviations of the mission name, for example 'cas' or 'gll'. The package
 described here provides as much generic support for those specific transators
 as possible.

 The SPICE input translator, SPICE_INPUT, reads all of the SPICE spacecraft
 and planetary ephemeris data and returns the appropriate descriptors.  The
 SPICE output translator, SPICE_OUTPUT, currently recognizes only camera
 descriptors, writing only a C-kernel containing any number of C matrices.


 Generic Kernel Detectors
 ------------------------
 The fundamental problem in the NAIF/SPICE system is determining which kernels
 are needed for a given image.   For kernels generated by NAIF, ths is relatively
 simple, as they adhere to a strict naming convention.  However, project-
 generated kernels (mainly CK and SPK) reside in a special level of hell where 
 file names may have any meaning or none at all, may give the coverage dates, 
 some kind of mission-specific version code, may be generated according to an 
 algorithm, or may be written by a human operator who may or may not have had 
 a good day.  Therefore, automatic construction of a kernel pool is not trivial.
 Indeed, we are not aware that it has ever been accomplished in a generic sense.

 One solution to the problem is to have a separate set of kernel detectors for
 each mission.  For example, the CAS package has a set of detectors that can 
 identify kernels based on known Cassini conventions.  However, coding such a 
 system is often one of the most difficult parts of adding a SPICE translator
 for a new mission.  Therefore we have attempted to developed and automatic 
 system for generic kernel pool detection.  These detectors are automatically 
 called if no specific detectors are fould for a mission package.  At present, 
 the system funtions, but needs refinement to produce the most concise kernel 
 pool.
 
 Coverage times are specified within the kernel or its detached label, so 
 determining a set of kernels that covers a given observation is conceptually
 simple.  In practice, reading the coverage times from every available kernel 
 file and finding the relevant kernels may take minutes, so we have implemented 
 a system that catalogs all relevant kernel information into a database that can 
 be searched quickly (see below).  

 Determining the latest version of a kernel is much more difficult because the 
 SPICE system does not track version information; that information typically
 is encoded (if at all) in the kernel file name, in a project-specific code.  
 We attempt to solve this problem by looking at a number of indicators like
 segment interval lengths, label time stamps, file time stamps, etc.
 






[[needs updating...]]


Kernel Databases
----------------

Stored in the ~/.ominas directory (.ominas directory under
the users home directory) are two types of kernel databases.
Camera kernels (CKs) and Spacecraft and Planetary ephemeris
kernels (SPKs) each have databases specified by directory:

spice_ck_database.<encoded path of ck directory>
spice_spk_database.<encoded path of spk directory>

The encoded path is the actual path of the kernels
with interior "/" replaced by "_" to avoid file directory
structure issues.  The path can include a wildcard, 
i.e. can span several subdirectories.  In this case the 
wildcard "*" is replaced by a "x".  When a wildcard is 
included in a path for kernels, the database contains
files for all applicable directories.

------------------
Example:

If SPKs have the following structure...

/user/kernels/cas/spk/ephem
/user/kernels/cas/spk/tour

One would specify the path as "/user/kernels/cas/spk/*"
and the database would be

spice_spk_database.user_kernels_cas_spk_x

------------------

The kernel database contains full-path names for all
files in the kernel path.  It includes the range
each file covers (ET seconds for SPK, Spacecraft clock
ticks for CK) for valid kernel files, otherwise they
contain the value -1.  For each file there is time
information (if available, -1 if not) about the creation
date of the file to use in kernel load ordering.  SPICE
uses later loaded kernels to handle times which are
defined in multiple kernel files.  The current
implemetation has three times, the file system time
returned by the operating system, the creation time
read from a PDS label file, and a time read from the
OMINAS installation timestamps file which attemps to
store the time on the file from the source location.


Kernel database creation
------------------------

The IDL methods to create them are

spice_ck_build_db
spice_spk_build_db

Each has two arguments, the path of the kernels and
an optional return of a structure of database contents.

Since the range times stored in the database correspond
to the internal times in the kernels, no leapsecond
or sclk kernels are needed to create them.  However,
the ICY library needs to be installed with dlm_register.


Ordered Kernel files
--------------------
In order to retrieve an ordered list of kernel files
to load for the SPICE calculations, two functions exist,
one for each type of kernel:

files = spice_ck_detect( ckpath, sc=xxx, time=xxx)
files = spice_spk_detect( kpath, time=xxx )

Both routines accept time as ET seconds as the time
to use to deterimine kernel coverage.  This means
that a leapseconds kernel and a sclk kernel needs
to be loaded for the spice_ck_detect routine.  The
CK routine also needs the NAIF spacecraft ID.  If
no files are found an empty string is returned.

Files returned are in order of creation according
to the following.

Once files are selected by applicability to the time
input, values for the three different time systems
are checked.  If PDS Label times exist for all files then
the PDS Label time is used, if they don't exist for
all the selected files then OMINAS timestamps are
used if they exist for all selected files.  If not,
operating system times are used.


 



